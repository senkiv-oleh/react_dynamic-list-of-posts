{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","components/Loader/Loader.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","setSelectPost","selectedPostId","className","map","post","key","id","userId","title","type","classNames","onClick","NewCommentForm","onAdd","useState","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","onSubmit","event","preventDefault","name","placeholder","value","onChange","target","required","request","url","options","fetch","then","res","json","result","data","getPosts","Loader","getCommentDelete","commentId","method","addComment","comments","headers","body","JSON","stringify","PostDetails","selectedPost","setSelectedPost","setComments","hideComments","setHideComments","useEffect","postId","getCommentsPost","comment","filter","item","length","carrentStatus","carrentList","email","currentComment","App","setPosts","users","setUsers","setSelectedPostId","getUsers","selectedUserPosts","getUserPosts","user","ReactDOM","render","document","getElementById"],"mappings":"uXAMaA,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,cAAeC,EAAzB,EAAyBA,eAAzB,OACvB,yBAAKC,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXH,EAAMI,KAAI,SAAAC,GAAI,OACb,wBAAIF,UAAU,kBAAkBG,IAAKD,EAAKE,IACxC,6BACE,2CACYF,EAAKG,OADjB,OAGCH,EAAKI,OAER,4BACEC,KAAK,SACLP,UAAWQ,IACT,oBACA,SACA,CAAE,iBAAkBT,IAAmBG,EAAKE,KAE9CK,QAAS,kBAAOV,IAAmBG,EAAKE,GACpCN,EAAc,GACdA,EAAcI,EAAKE,MAGtBL,IAAmBG,EAAKE,GAAK,QAAU,gB,OC3BvCM,G,MAAiB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC/B,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAWA,OACE,0BACElB,UAAU,iBACVmB,SAZkB,SAACC,GACrBA,EAAMC,iBACNV,EAAME,EAASE,EAAUE,GAEzBH,EAAW,IACXE,EAAY,IACZE,EAAW,MAQT,yBAAKlB,UAAU,cACb,2BACEO,KAAK,OACLe,KAAK,OACLC,YAAY,YACZvB,UAAU,wBACVwB,MAAOX,EACPY,SAAU,SAAAL,GAAK,OAAIN,EAAWM,EAAMM,OAAOF,QAC3CG,UAAQ,KAIZ,yBAAK3B,UAAU,cACb,2BACEO,KAAK,QACLe,KAAK,QACLC,YAAY,aACZvB,UAAU,wBACVwB,MAAOT,EACPU,SAAU,SAAAL,GAAK,OAAIJ,EAAYI,EAAMM,OAAOF,QAC5CG,UAAQ,KAIZ,yBAAK3B,UAAU,cACb,8BACEsB,KAAK,OACLC,YAAY,oBACZvB,UAAU,wDACVwB,MAAOP,EACPQ,SAAU,SAAAL,GAAK,OAAIF,EAAWE,EAAMM,OAAOF,QAC3CG,UAAQ,KAIZ,4BACEpB,KAAK,SACLP,UAAU,wCAFZ,oBCxDO4B,G,MAAU,SAACC,EAAKC,GAAN,OAAkBC,MAAM,GAAD,OAFtB,kCAEsB,OAAeF,GAAOC,GACjEE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,UCFZC,EAAW,kBAAMT,EAAQ,WCCzBU,G,MAAS,kBACpB,yBAAKtC,UAAU,UACb,yBAAKA,UAAU,uBCGZ,IAAMuC,EAAmB,SAAAC,GAAS,OHFnBX,EGE8B,aAAD,OAAcW,GHFpCZ,EAAQC,EAAK,CAAEY,OAAQ,WAA9B,IAAAZ,GGIf,SAASa,EAAWC,GACzB,OHHwBP,EGGCO,EHHQf,EGGrB,YHHkC,CAC9Ca,OAAQ,OACRG,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUX,KALH,IAAMA,EIInB,IAAMY,EAAc,SAAC,GAAwB,IAAtBjD,EAAqB,EAArBA,eAC5B,EAAwCa,mBAAS,MAAjD,mBAAOqC,EAAP,KAAqBC,EAArB,KACA,EAAgCtC,mBAAS,MAAzC,mBAAO+B,EAAP,KAAiBQ,EAAjB,KACA,EAAwCvC,oBAAS,GAAjD,mBAAOwC,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WHVkB,IAAAC,KGWXxD,EHXqB6B,EAAQ,UAAD,OAAW2B,KGYnDvB,MAAK,SAAA9B,GAAI,OAAIgD,EAAgBhD,MAEhCiD,EAAY,MDjBT,SAAyBI,GAC9B,OAAO3B,EAAQ,oBAAD,OAAqB2B,ICkBjCC,CAAgBzD,GACbiC,MAAK,SAAAyB,GAAO,OAAIN,EAAYM,EAC1BC,QAAO,SAAAC,GAAI,OAAmB,OAAfA,EAAKrD,eACxB,CAACP,IAyBJ,OACE,yBAAKC,UAAU,eACb,6CACCiD,EACC,oCACE,6BAASjD,UAAU,qBACjB,2BAAIiD,EAAa3C,QAElBqC,EACC,oCACE,6BAAS3C,UAAU,yBACI,IAApB2C,EAASiB,OACN,kBAEA,4BACErD,KAAK,SACLP,UAAU,SACVS,QAAS,WACP4C,GAAgB,SAAAQ,GAAa,OAAKA,OAGnCT,EAAY,eACDT,EAASiB,OADR,4BAEDjB,EAASiB,OAFR,eAOjBR,GACF,wBAAIpD,UAAU,qBACX2C,EAAS1C,KAAI,SAAAwD,GAAO,OACnB,wBAAItD,IAAKsD,EAAQrD,GAAIJ,UAAU,0BAC7B,4BACEO,KAAK,SACLP,UAAU,oCACVS,QAAS,WA1DT,IAAC+B,IA2DeiB,EAAQrD,GA1D5CmC,EAAiBC,GACdR,MAAK,WACJmB,GAAY,SAAAW,GAAW,OACrBA,EAAYJ,QAAO,SAAAD,GAAO,OAAIA,EAAQrD,KAAOoC,aAmDjC,KASA,2BAAIiB,EAAQZ,YAQpB,iCACE,yBAAK7C,UAAU,6BACb,kBAAC,EAAD,CAAgBW,MAjEV,SAACW,EAAMyC,EAAOlB,GAQlCH,EAPsB,CACpBpB,OACAyC,QACAlB,OACAU,OAAQxD,IAIPiC,MAAK,SAACG,GACLgB,GAAY,SAAAa,GAAc,4BAAQA,GAAR,CAAwB7B,gBA4D9C,kBAAC,EAAD,OAIJ,kBAAC,EAAD,QC7BO8B,EAzEH,WACV,MAA0BrD,mBAAS,IAAnC,mBAAOf,EAAP,KAAcqE,EAAd,KACA,EAA0BtD,mBAAS,IAAnC,mBAAOuD,EAAP,KAAcC,EAAd,KACA,EAA4CxD,mBAAS,GAArD,mBAAOb,EAAP,KAAuBsE,EAAvB,KAEAf,qBAAU,WACRjB,IACGL,MAAK,SAAAI,GAAI,OAAI8B,EAAS9B,MCdL,eAAC/B,EAAD,uDAAU,GAAV,OAAiBuB,EAAQ,UAAD,OAAWvB,IDevDiE,GACGtC,MAAK,SAAAI,GAAI,OAAIgC,EAAShC,QACxB,IAEH,IAAMmC,EAAoB,SAAClE,GACV,IAAXA,EJlBoB,SAAAA,GAAM,OAAIgC,IACnCL,MAAK,SAAAC,GAAG,OAAIA,EAAIyB,QAAO,SAAAxD,GAAI,OAAKA,EAAKG,SAAWA,QIkB7CmE,CAAanE,GACV2B,MAAK,SAAAI,GAAI,OAAI8B,EAAS9B,MAEzBC,IACGL,MAAK,SAAAI,GAAI,OAAI8B,EAAS9B,OAY7B,OACE,yBAAKpC,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVyB,SAAU,SAAAL,GAAK,OAAImD,GAAmBnD,EAAMM,OAAOF,SAGnD,4BAAQA,MAAM,KAAd,aACC2C,EAAMlE,KAAI,SAAAwE,GAAI,OACb,4BACEjD,MAAOiD,EAAKrE,GACZD,IAAKsE,EAAKrE,IAETqE,EAAKnD,YAOhB,0BAAMtB,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEH,MAAOA,EACPE,eAAgBA,EAChBD,cArCY,SAACyD,GACrB,OACSc,EADLd,IAAWxD,EACY,EAGFwD,OAoCrB,yBAAKvD,UAAU,gBACO,IAAnBD,EACG,kBAAC,EAAD,CAAaA,eAAgBA,IAC7B,uBEtEd2E,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3a1c89cd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, setSelectPost, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li className=\"PostsList__item\" key={post.id}>\n          <div>\n            <b>\n              {`User #${post.userId}: `}\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className={classNames(\n              'PostsList__button',\n              'button',\n              { 'button--active': selectedPostId === post.id },\n            )}\n            onClick={() => (selectedPostId === post.id\n              ? setSelectPost(0)\n              : setSelectPost(post.id)\n            )}\n          >\n            {selectedPostId === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  setSelectPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAdd }) => {\n  const [newName, setNewName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [newBody, setNewBody] = useState('');\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    onAdd(newName, newEmail, newBody);\n\n    setNewName('');\n    setNewEmail('');\n    setNewBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newName}\n          onChange={event => setNewName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newEmail}\n          onChange={event => setNewEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={newBody}\n          onChange={event => setNewBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(res => res.json())\n  .then(result => result.data);\n\nexport const remove = url => request(url, { method: 'DELETE' });\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n","import { request } from './api';\n\nexport const getPosts = () => request(`/posts`);\n\nexport const getUserPosts = userId => getPosts()\n  .then(res => res.filter(post => (post.userId === userId)));\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { request, remove, post } from './api';\n\nexport const getComments = () => request(`/comments`);\n\nexport function getCommentsPost(postId) {\n  return request(`/comments?postId=${postId}`);\n}\n\nexport const getCommentDelete = commentId => remove(`/comments/${commentId}`);\n\nexport function addComment(comments) {\n  return post(`/comments`, comments);\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport {\n  getCommentsPost,\n  addComment,\n  getCommentDelete,\n} from '../../api/comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [hideComments, setHideComments] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(post => setSelectedPost(post));\n\n    setComments(null);\n\n    getCommentsPost(selectedPostId)\n      .then(comment => setComments(comment\n        .filter(item => item.title !== null)));\n  }, [selectedPostId]);\n\n  const romoveComment = (commentId) => {\n    getCommentDelete(commentId)\n      .then(() => {\n        setComments(carrentList => (\n          carrentList.filter(comment => comment.id !== commentId)\n        ));\n      });\n  };\n\n  const addNewComment = (name, email, body) => {\n    const createComment = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    addComment(createComment)\n      .then((result) => {\n        setComments(currentComment => [...currentComment, result]);\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {selectedPost ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{selectedPost.title}</p>\n          </section>\n          {comments ? (\n            <>\n              <section className=\"PostDetails__comments\">\n                {comments.length === 0\n                  ? 'No comments yet'\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => {\n                        setHideComments(carrentStatus => !carrentStatus);\n                      }}\n                    >\n                      {hideComments\n                        ? `Show ${comments.length} comments`\n                        : `Hide ${comments.length} comments`\n                      }\n                    </button>\n                  )}\n\n                {!hideComments && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li key={comment.id} className=\"PostDetails__list-item\">\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          romoveComment(comment.id);\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n                )}\n\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm onAdd={addNewComment} />\n                </div>\n              </section>\n            </>\n          ) : (\n            <Loader />\n          )}\n        </>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getPosts()\n      .then(data => setPosts(data));\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  const selectedUserPosts = (userId) => {\n    if (userId !== 0) {\n      getUserPosts(userId)\n        .then(data => setPosts(data));\n    } else {\n      getPosts()\n        .then(data => setPosts(data));\n    }\n  };\n\n  const setSelectPost = (postId) => {\n    if (postId === selectedPostId) {\n      return setSelectedPostId(0);\n    }\n\n    return setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => selectedUserPosts(+event.target.value)}\n          >\n\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            setSelectPost={setSelectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0\n            ? <PostDetails selectedPostId={selectedPostId} />\n            : 'No selected post'}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = (userId = '') => request(`/users/${userId}`);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}